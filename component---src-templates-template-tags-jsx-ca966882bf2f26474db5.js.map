{"version":3,"file":"component---src-templates-template-tags-jsx-ca966882bf2f26474db5.js","mappings":"+JAmCA,IA9BqBA,IACnB,MAAM,KAAEC,GAASD,EACjB,IAAIE,OAASC,EAYb,OAVIF,EAAKG,YAAYC,QAEnBH,EACE,gBAAC,EAAAI,EAAW,CAACC,UAAU,GACrBF,MAAOJ,EAAKG,YAAYC,MAAMG,gBAAgBC,gBAC9CC,IAAKT,EAAKG,YAAYO,SAMtB,uBAAKJ,UAAU,mDACf,gBAAC,EAAAK,KAAI,CAACC,GAAIZ,EAAKa,OAAOC,KAAMR,UAAU,KAEpC,sBAAIA,UAAU,gCACXN,EAAKG,YAAYO,OAEnBT,EACD,0BAAKD,EAAKG,YAAYY,OAIlB,C,yECoBd,UA3Ca,IAA4B,IAA3B,YAAEC,EAAW,KAAEhB,GAAM,EACjC,MAAM,IAAEiB,GAAQD,GACV,MAAEE,GAAUlB,EAAKmB,kBAKvB,OACE,gBAAC,IAAM,CAACC,OAAQH,GACZ,uBAAKX,UAAU,yCACZN,EAAKmB,kBAAkBD,MAAMG,KAAI,QAAC,KAAEC,GAAM,SACzC,gBAAC,IAAW,CAACtB,KAAMsB,EAAMC,IAAKD,EAAKT,OAAOC,MAAQ,KAKjD,C","sources":["webpack://santitfg.github.io/./src/components/cardpreview.jsx","webpack://santitfg.github.io/./src/templates/template-tags.jsx"],"sourcesContent":["// import { StaticImage } from \"gatsby-plugin-image\";\nimport {  Link  } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nconst CardPreview = (props) => {\n  const { data } = props;\n  var imagen = undefined;\n\n  if (data.frontmatter.image) {\n    //esto por ahi es un poco rebuscado y podria hacer uan ternaria pero me parece que lo vuelve poco legible\n    imagen = (\n      <GatsbyImage className=\"\"\n        image={data.frontmatter.image.childImageSharp.gatsbyImageData}\n        alt={data.frontmatter.title}\n      />\n    );\n  }\n\n  return (\n        <div className=\" bg-gray-800  hover:bg-red-400 inline-block m-2\">\n        <Link to={data.fields.slug} className=\" \">\n\n          <h1 className=\"text-xl text-white font-bold\">\n            {data.frontmatter.title}\n          </h1>\n          {imagen}\n          <h3>{data.frontmatter.date}</h3>\n          {/* <p className=\"mt-2 text-sm text-gray-300\">{data.excerpt}</p> */}\n          </Link>\n\n        </div>\n  );\n};\n\nexport default CardPreview;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CardPreview from \"../components/cardpreview\";\n\n// Components\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { edges } = data.allMarkdownRemark;\n  // const tagHeader = `${totalCount} post${\n  //   totalCount === 1 ? \"\" : \"s\"\n  // } tagged with \"${tag}\"`\n\n  return (\n    <Layout titulo={tag}>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {data.allMarkdownRemark.edges.map(({ node }) => (\n            <CardPreview data={node} key={node.fields.slug} />\n          ))}\n        </div>\n\n        {/* <Link to=\"/tags\">All tags</Link> */}\n    </Layout>\n  );\n};\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n            layout\n            image {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["props","data","imagen","undefined","frontmatter","image","G","className","childImageSharp","gatsbyImageData","alt","title","Link","to","fields","slug","date","pageContext","tag","edges","allMarkdownRemark","titulo","map","node","key"],"sourceRoot":""}