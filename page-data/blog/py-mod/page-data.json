{"componentChunkName":"component---src-templates-template-jsx","path":"/blog/py-mod/","result":{"data":{"markdownRemark":{"html":"<h1>py-mod-obj</h1>\n<p><img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/13.jpg\" alt=\"hoja modificada con slice de planos\"></p>\n<p>pequeña investigación sobre como modificar archivos Wavefront (.obj) a apatir de procesarlos como texto</p>\n<p>IMPORTANTE BORRAR LOS COMENTARIOS DEL OBJ ORIGINAL YA QUE ESTOS PUEDEN GENERAR ERRORES EN EL REGEX ACTUAL\nA SU VEZ ESTE PROGRAMA NO CARGA LOS MATERIALES DEL OBJ (si sus normales y texcoord)</p>\n<h2>Versión Actual (minimo producto viable)</h2>\n<p>Ante la dificultad de acotar la cantidad de variantes que surgieron y las funciones que cree. Decidí solamente hacer un script que substraiga planos de un archivo obj (waveform ) y los cambie de lugar<br>\nSi se desea ver con mayor detenimiento el proceso y el trabajo actual, consultar la carpeta wip( work in progress) donde estoy desarrollando una serie de funciones y anotaciones de cómo continuar este programa.</p>\n<h2>el desarrollo del programa</h2>\n<p>El proceso fue:</p>\n<ul>\n<li>un desarmar mínimamente la estructura de un obj</li>\n<li>testear manualmente que modificaciones hacian efecto y cuales otras rompían el archivo</li>\n<li>luego empezar a desarrollar un sistema de diversos regex (un pequeño lenguaje de reconocimiento de caracteres)</li>\n<li>lograr cargar y guardar el archivo partiendo del procesamiento por regex</li>\n<li>luego de esto automatice la tarea en una serie de bucles de: cargar | modificar | salvar</li>\n<li>genere un parser para recibir los argumentos del script (de manera muy similar que funciona el FFMPEG)</li>\n<li>y actualmente trabajo en diversas funciones y teorizando sí constituir una clases y un pequeño módulo de libreria</li>\n</ul>\n<h2>Description</h2>\n<h2>Modo de Uso</h2>\n<p>El programa recibe diversos parametros para su funcionamiento\nEste script debe ser llamado utilizando python (puedo garantizar la compativilidad con Python 3.7.5 en adelante pero probablemente con cualquier python 3.xx funcione)</p>\n<p>En el default solamente copia el objeto por ello es necesario modificar algun parametro del slice ejemplo</p>\n<pre><code>python py-mod-obj.py --end 3\n</code></pre>\n<p>Parametro del objeto a modificar la ruta es relativa a la carpeta de ejecucion del script (default = cubo \"Fecha Actual\".obj)</p>\n<pre><code>--objetoPath\n</code></pre>\n<p>Parametro de inicio del slice (default = 0)</p>\n<pre><code>--start\n</code></pre>\n<p>Parametro de la cantidad de pasos quehace el slice (default = 1)</p>\n<pre><code>--step\n</code></pre>\n<p>Parametro de fin del slice (default cantidad de planos en el obj)</p>\n<pre><code>--end\n</code></pre>\n<p>Parametro para cambiar el nombre del obj saliente (default = cubo)</p>\n<pre><code>--out\n</code></pre>\n<p>Parametro que añade al nombre del objeto saliente la fecha de creacion (default = True)</p>\n<pre><code>--imprimirfecha\n</code></pre>\n<h2>Imagenes de resultados con todo el abanico de funciones desarrolladas</h2>\n<h3>Modificacion por medio de ordenar todos los numeros contenidos en los vertices de menor a mayor (un sort)</h3>\n<p><img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/1.png\" alt=\"hoja modificada con un sort de menor a mayor sobre los vertices\"></p>\n<hr>\n<h3>Modificacion con un random escalado segun el n° del vertice</h3>\n<p><img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/2.png\" alt=\"hoja modificada con un random escalado segun el n° del vertice\"></p>\n<hr>\n<h3>Modificacion desde un slice de vertices y su puesta en reversa (se subtrae un conjunto n° planos y se incerta al final del obj)</h3>\n<p><img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/8.png\" alt=\"moebius modificado con slice de vertices y un reverse de los mismos\">\n<img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/10.png\" alt=\"moebius modificado con slice de vertices y un reverse de los mismos\"></p>\n<hr>\n<h3>Modificacion desde un slice de planos (se subtrae un conjunto n° planos y se incerta al final del obj)</h3>\n<p><img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/3.png\" alt=\"cubo modificado con slice de planos\">\n<img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/4.png\" alt=\"hoja modificada con slice de planos\">\n<img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/5.png\" alt=\"cubo modificado con slice de planos\">\n<img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/6.png\" alt=\"cubo modificado con slice de planos\">\n<img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/7.png\" alt=\"moebius modificado con slice de planos\">\n<img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/11.png\" alt=\"hoja modificada con slice de planos\">\n<img src=\"https://gitlab.com/stfg.prof/py-mod-obj/-/raw/main/fotos/12.png\" alt=\"hoja modificada con slice de planos\"></p>","fields":{"slug":"/blog/py-mod/"},"frontmatter":{"date":"2022-06-24","title":"En Busqueda de un Glitch 3D","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/static/4fdfda97191426b4a816a4564c5e6449/47b13/13.jpg","srcSet":"/static/4fdfda97191426b4a816a4564c5e6449/949c5/13.jpg 404w,\n/static/4fdfda97191426b4a816a4564c5e6449/cb579/13.jpg 807w,\n/static/4fdfda97191426b4a816a4564c5e6449/47b13/13.jpg 1614w","sizes":"(min-width: 1614px) 1614px, 100vw"},"sources":[{"srcSet":"/static/4fdfda97191426b4a816a4564c5e6449/b04b3/13.webp 404w,\n/static/4fdfda97191426b4a816a4564c5e6449/dd8f5/13.webp 807w,\n/static/4fdfda97191426b4a816a4564c5e6449/5ee8e/13.webp 1614w","type":"image/webp","sizes":"(min-width: 1614px) 1614px, 100vw"}]},"width":1614,"height":916}}}}}},"pageContext":{"slug":"/blog/py-mod/"}},"staticQueryHashes":[],"slicesMap":{}}